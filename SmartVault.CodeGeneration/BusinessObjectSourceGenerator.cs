using Microsoft.CodeAnalysis;
using System.Xml.Serialization;
using System.IO;
using System;
using SmartVault.Library;
using System.Linq;
using System.Text;

namespace SmartVault.CodeGeneration
{
    [Generator]
    public class BusinessObjectSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            // Find the main method
            var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken);

            // Build up the source code
            if (context.AdditionalFiles.Count() >= 3)
            {
                for (int i = 0; i < 3; i++)
                {
                    var file = context.AdditionalFiles[i];
                    var fileContents = file.GetText().ToString();

                    var serializer = new XmlSerializer(typeof(BusinessObject));
                    using var reader = new StringReader(fileContents);
                    var name = Path.GetFileNameWithoutExtension(file.Path);
                    BusinessObject businessObjectModel;

                    try
                    {
                        businessObjectModel = (BusinessObject)serializer.Deserialize(reader);
                    }
                    catch (Exception ex)
                    {
                        context.ReportDiagnostic(Diagnostic.Create(new DiagnosticDescriptor("BOSG01", "Error deserializing XML", $"Error deserializing XML: {ex.Message}", "Generator", DiagnosticSeverity.Error, true), Location.None));
                        continue;
                    }

                    var propertiesString = new StringBuilder();
                    if (businessObjectModel != null && businessObjectModel.PropertyGroup != null && businessObjectModel.PropertyGroup.Property != null && businessObjectModel.PropertyGroup.Property.Any())
                    {
                        foreach (var property in businessObjectModel.PropertyGroup.Property)
                        {
                            propertiesString.AppendLine($"        public {property.Type} {property.Name} {{ get; set; }}");
                        }
                    }

                    var businessObjectClassString = $@"// <auto-generated/>
namespace {mainMethod.ContainingNamespace.ToDisplayString()}.BusinessObjects
{{
    public partial class {name}
    {{
{propertiesString}
    }}
}}
";
                    context.AddSource($"{name}.generated.cs", businessObjectClassString);
                }
            }
            else
            {
                context.ReportDiagnostic(Diagnostic.Create(new DiagnosticDescriptor("BOSG02", "Insufficient number of AdditionalFiles", $"Expected at least 3 AdditionalFiles, found {context.AdditionalFiles.Count()}", "Generator", DiagnosticSeverity.Warning, true), Location.None));
            }
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            // No initialization required for this one
        }
    }
}